<policies>
    <inbound>
        <base />
        <!-- Check if client has required role -->
        <choose>
            <when condition="@(((JArray)context.Variables["rbac-roles"]).Any(item => item.Value<string>() == "subscribe_*" || item.Value<string>() == "subscribe_##message-type##") == false)">
                <return-response>
                    <set-status code="403" reason="Forbidden" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>{ "error" : "Client does not have the required roles 'subscribe_##message-type##' or 'subscribe_*'" }</set-body>
                </return-response>
            </when>
            <otherwise />
        </choose>
        <!--Receive message from Event Grid-->
        <set-method>POST</set-method>
        <set-backend-service base-url="{{messaging-api-eventgrid-url}}" />
        <authentication-managed-identity resource="https://eventgrid.azure.net" ignore-error="false" />
        <rewrite-uri template="@("/topics/{{messaging-api-topic-name}}/eventsubscriptions/" + (string)context.Variables["rbac-id"] + "-##subscription-name##:receive?api-version=2023-06-01-preview&maxEvents=1&maxWaitTime=90")" copy-unmatched-params="false" />
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
        <set-variable name="response-body" value="@(context.Response.Body.As<JObject>())" />
        <set-variable name="response-data" value="@(((JObject)context.Variables["response-body"]).SelectToken("value[0].event.data"))" />
        <!--Check if response contains CloudEvent-->
        <choose>
            <!-- If yes, remove CloudEvents Envelope -->
            <when condition="@(context.Variables["response-data"] != null)">
                <set-body template="none">@(((JObject)context.Variables["response-body"]).SelectToken("value[0].event.data").ToString())</set-body>
                <set-header name="X-MessagingApi-MessageToken" exists-action="override">
                    <value>@(((JObject)context.Variables["response-body"]).SelectToken("value[0].brokerProperties.lockToken").ToString())</value>
                </set-header>
                <set-header name="X-MessagingApi-DeliveryCount" exists-action="override">
                    <value>@(((JObject)context.Variables["response-body"]).SelectToken("value[0].brokerProperties.deliveryCount").ToString())</value>
                </set-header>
                <!--Set Client Tracking Id HTTP Header-->
                <set-variable name="client-tracking-id" value="@{
                var clientTrackingId = ((JObject)context.Variables["response-body"]).SelectToken("value[0].event.clienttrackingid");
                if(clientTrackingId != null)
                {
                return clientTrackingId.ToString();
                }
                else
                {
                return "none";
                }            
                }" />
                <choose>
                    <when condition="@(context.Variables.GetValueOrDefault<string>("client-tracking-id") != "none")">
                        <set-header name="x-ms-client-tracking-id" exists-action="override">
                            <value>@(context.Variables.GetValueOrDefault<string>("client-tracking-id"))</value>
                        </set-header>
                    </when>
                </choose>
            </when>
            <otherwise>
                <!-- If no, return no data -->
                <return-response>
                    <set-status code="202" reason="Accepted" />
                    <set-body />
                </return-response>
            </otherwise>
        </choose>
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>