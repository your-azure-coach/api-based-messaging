<policies>
    <inbound>
        <base />
        <!-- Check if client has required role -->
        <choose>
            <when condition="@(((JArray)context.Variables["rbac-roles"]).Any(item => item.Value<string>() == "subscribe_*" || item.Value<string>() == "subscribe_##message-type##") == false)">
                <return-response>
                    <set-status code="403" reason="Forbidden" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>{ "error" : "Client does not have the required roles 'subscribe_##message-type##' or 'subscribe_*'" }</set-body>
                </return-response>
            </when>
            <otherwise />
        </choose>
        <!-- Create topic subscription in event grid for message type -->
        <set-method>PUT</set-method>
        <set-backend-service base-url="https://management.azure.com" />
        <authentication-managed-identity resource="https://management.azure.com/" ignore-error="false" />
        <rewrite-uri template="@("{{messaging-api-event-grid-namespace-id}}/topics/{{messaging-api-topic-name}}/eventSubscriptions/" + (string)context.Variables["rbac-id"] + "-##subscription-name##?api-version=2024-06-01-preview")" copy-unmatched-params="false" />
        <set-header name="Content-Type" exists-action="override">
            <value>application/json</value>
        </set-header>
        <set-body template="none">{
  "properties": {
    "deliveryConfiguration": {
      "deliveryMode": "Queue",
      "queue": {
        "receiveLockDurationInSeconds": {{messaging-api-receive-lock-duration}},
        "maxDeliveryCount": {{messaging-api-max-delivery-count}},
        "eventTimeToLive": "P7D"
      }
    },
    "filtersConfiguration" : {
        "includedEventTypes" : [ "customer.onboarded.v1" ]
    },
    "eventDeliverySchema": "CloudEventSchemaV1_0"
  }
}</set-body>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <!-- Poll until provisioning state is Succeeded -->
        <authentication-managed-identity resource="https://management.azure.com/" output-token-variable-name="msi-access-token" ignore-error="false" />
        <retry condition="@(context.Variables["status-check-response"] == null || (string)((IResponse)context.Variables["status-check-response"]).Body.As<JObject>().SelectToken("properties.provisioningState") != "Succeeded")" count="50" interval="3">
            <send-request mode="new" response-variable-name="status-check-response" timeout="20" ignore-error="false">
                <set-url>@("https://management.azure.com{{messaging-api-event-grid-namespace-id}}/topics/{{messaging-api-topic-name}}/eventSubscriptions/" + (string)context.Variables["rbac-id"] + "-customer-onboarded-v1?api-version=2024-06-01-preview")</set-url>
                <set-method>GET</set-method>
                <set-header name="Authorization" exists-action="override">
                    <value>@("Bearer " + (string)context.Variables["msi-access-token"])</value>
                </set-header>
            </send-request>
        </retry>
        <!-- Return OK response -->
        <set-body template="none"></set-body>
        <set-status code="201" reason="Created" />
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>